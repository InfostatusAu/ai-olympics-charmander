# File Manager Library

> Markdown file operations and template management for prospect research content with structured storage.

This library handles all file operations for the prospect research system, including template loading, markdown report generation, and file storage management. It provides a clean interface for content management with proper error handling.

## Core Components

- [Storage](storage.py): Markdown file operations with atomic writes and content validation
- [Templates](templates.py): Template loading and management for research reports and profiles
- [CLI Interface](cli.py): Command-line tools for file operations and template management

## Key Features

- **Template System**: Structured templates for research reports and prospect profiles
- **Atomic File Operations**: Safe file writes with backup and rollback capabilities
- **Content Validation**: Markdown content validation and formatting
- **Directory Management**: Automatic directory creation and organization
- **Structured Logging**: Comprehensive logging for all file operations

## Template Structure

Templates are stored in `data/templates/` with the following formats:
- `research_template.md`: Template for research reports with data source sections
- `profile_template.md`: Template for prospect profiles with strategy sections

## File Organization

The library manages files in a structured hierarchy:
```
data/
├── prospects/
│   └── prospect_YYYYMMDDHHMMSS/
│       ├── prospect_YYYYMMDDHHMMSS_research.md
│       └── prospect_YYYYMMDDHHMMSS_profile.md
└── templates/
    ├── research_template.md
    └── profile_template.md
```

## Usage Patterns

- **Template Loading**: Use `load_template()` for getting base templates
- **Report Saving**: Use `save_markdown_report()` for structured content storage
- **Content Reading**: Use `read_markdown_file()` for retrieving saved content
- **Async Operations**: All file operations support async/await patterns

## Content Standards

- **Markdown Format**: All content uses standard Markdown with frontmatter support
- **UTF-8 Encoding**: All files use UTF-8 encoding for international character support
- **Timestamp Naming**: Files use ISO timestamp format for chronological organization
- **Validation**: Content validation ensures proper Markdown structure

## Dependencies

- Python standard library (pathlib, asyncio)
- structlog for structured logging
- UTF-8 file handling for international content
