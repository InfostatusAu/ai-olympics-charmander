# MCP Server Library

> Model Context Protocol server implementation for prospect research automation with standardized tool interfaces.

This library implements the Model Context Protocol (MCP) server for the prospect research system, providing standardized tool interfaces that enable AI assistants to perform research and profile generation operations through a well-defined protocol.

## Core Components

- [Server](server.py): MCP protocol server implementation with tool registration and request handling
- [Tools](tools.py): MCP tool implementations for research, profiling, and data operations
- [CLI Interface](cli.py): Command-line server management and configuration tools

## Key Features

- **MCP Protocol Compliance**: Full implementation of Model Context Protocol specification
- **Standardized Tool Interface**: Consistent tool definitions with JSON schema validation
- **Async Request Handling**: Non-blocking request processing for performance
- **Error Handling**: Comprehensive error handling with detailed error messages
- **Structured Logging**: Complete operation logging for debugging and monitoring

## Available MCP Tools

### research_prospect
- **Purpose**: Initiates comprehensive prospect research for a given company
- **Input**: `company` (string) - Company name or domain to research
- **Output**: String message with research status and generated files
- **Workflow**: Creates prospect → performs research → updates status → returns summary

### create_profile
- **Purpose**: Generates strategic profile from completed research data
- **Input**: `prospect_id` (string) - UUID of researched prospect
- **Output**: String message with profile generation status and insights
- **Requirements**: Prospect must be in RESEARCHED status with available research data

### get_prospect_data
- **Purpose**: Retrieves all available data for a specific prospect
- **Input**: `prospect_id` (string) - UUID of prospect to retrieve
- **Output**: Comprehensive string with prospect metadata and content
- **Includes**: Database metadata, research reports, and profile data if available

### search_prospects
- **Purpose**: Searches across all prospects and their research content
- **Input**: `query` (string) - Search terms to match against content
- **Output**: Formatted string with matching prospects and relevant excerpts
- **Scope**: Searches company names, domains, and research content

## Protocol Implementation

- **JSON-RPC 2.0**: Full compliance with JSON-RPC specification
- **Schema Validation**: All tool inputs validated against JSON schemas
- **Error Codes**: Standard MCP error codes for consistent error handling
- **Capability Negotiation**: Proper capability exchange during connection setup

## Server Architecture

- **Async Foundation**: Built on async/await for concurrent request handling
- **Tool Registry**: Dynamic tool registration with metadata and validation
- **Request Router**: Intelligent routing of tool calls to appropriate handlers
- **Session Management**: Proper connection lifecycle management

## Usage Patterns

- **Server Startup**: Use CLI interface to start MCP server on specified transport
- **Tool Invocation**: AI assistants call tools through MCP protocol messages
- **Error Handling**: Tools return structured error messages for failure cases
- **Status Tracking**: All operations update prospect status appropriately

## Integration Points

- **Database Library**: Uses database operations for prospect management
- **Research Library**: Integrates research functions for data collection
- **File Manager**: Uses file operations for content storage and retrieval
- **External APIs**: Coordinates with external data sources through research library

## Dependencies

- MCP SDK for protocol implementation
- asyncio for concurrent operations
- JSON schema validation libraries
- structlog for structured logging
- Integration with all other project libraries
