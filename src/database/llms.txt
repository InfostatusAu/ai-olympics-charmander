# Database Library

> SQLite database operations for prospect research data management with async support and structured logging.

This library provides minimal, efficient SQLite database operations for storing and retrieving prospect research metadata. It uses SQLAlchemy ORM with async sessions and includes comprehensive data validation.

## Core Components

- [Models](models.py): SQLAlchemy models for Prospect entity with status tracking and timestamps
- [Operations](operations.py): Async CRUD operations with session management and error handling
- [CLI Interface](cli.py): Command-line tools for database management and prospect operations

## Key Features

- **Async SQLite Support**: All database operations use async/await patterns
- **Data Validation**: Pydantic-style validation for prospect data integrity
- **Status Tracking**: ProspectStatus enum for research workflow management
- **Structured Logging**: Comprehensive logging with operation context
- **Session Management**: Automatic session handling with proper cleanup

## Database Schema

The database uses a single `prospects` table with the following structure:
- `id`: UUID primary key (string format for SQLite compatibility)
- `company_name`: Company identifier (required)
- `domain`: Company website domain (optional)
- `status`: Research status enum (NEW, RESEARCHING, RESEARCHED, PROFILED)
- `created_at`: Timestamp of prospect creation
- `updated_at`: Timestamp of last modification

## Usage Patterns

- **Default Functions**: Use `*_default()` functions for simple operations
- **Session-Aware Functions**: Use session parameter versions for transactions
- **Status Workflow**: NEW → RESEARCHING → RESEARCHED → PROFILED
- **Error Handling**: All operations include proper exception handling and logging

## Dependencies

- SQLAlchemy 2.0+ with async support
- aiosqlite for async SQLite operations
- structlog for structured logging
- Python 3.11+ for modern async features
